{"version":3,"sources":["App.js","index.js"],"names":["App","useForm","errors","register","handleSubmit","useState","labelValue","setLabelValue","blnShowProgress","setBlnShowProgress","algo","setAlgo","methodList","setMethodList","axios","get","then","response","console","log","data","length","displayname","className","onSubmit","post","inputfield","res","group","error","Select","name","ref","labelId","id","value","onChange","event","target","map","item","MenuItem","method","TextField","inputRef","required","label","style","margin","placeholder","fullWidth","InputLabelProps","shrink","Button","color","type","CircularProgress","rootElement","document","getElementById","ReactDOM","render"],"mappings":"iSA8GeA,EApGH,WAAO,IAAD,EAC2BC,cAAnCC,EADQ,EACRA,OAAQC,EADA,EACAA,SAAUC,EADV,EACUA,aADV,EAEoBC,mBAAS,IAF7B,mBAETC,EAFS,KAEGC,EAFH,OAG8BF,oBAAS,GAHvC,mBAGTG,EAHS,KAGQC,EAHR,OAIQJ,mBAAS,eAJjB,mBAITK,EAJS,KAIHC,EAJG,OAKoBN,mBAAS,MAL7B,mBAKTO,EALS,KAKGC,EALH,KAOZD,GACFE,IAAMC,IAAI,sBAAsBC,MAAK,SAAAC,GACnCC,QAAQC,IAAI,uBAAwBF,EAASG,MAC7CP,EAAcI,EAASG,UAyBvBV,GAAQE,GAAcA,EAAWS,OAAQ,IACvC,oBAAJX,EAAOE,EAAW,GAAGU,aAiBvB,OACE,yBAAKC,UAAU,OACb,uCACA,yGAIA,0BAAMC,SAAUpB,GA1CH,SAACgB,GAChBF,QAAQC,IAAIC,GACZb,EAAc,IACdE,GAAmB,GACnBS,QAAQC,IAAI,oBAAqBT,GACjCI,IAAMW,KAAK,IAAMf,EAAO,CAAC,MAAUU,EAAKM,aAAaV,MAAK,SAACW,GACzDT,QAAQC,IAAI,WAAYQ,GACpBA,EAAIP,MACNb,EAAcoB,EAAIP,KAAKQ,OAEzBnB,GAAmB,MAClB,SAACoB,GACFX,QAAQC,IAAI,QAASU,GACrBpB,GAAmB,UA+BnB,kBAACqB,EAAA,EAAD,CAAQC,KAAK,OAAOC,IAAK7B,EACrB8B,QAAQ,+BACRC,GAAG,yBACHC,MAAOzB,EACP0B,SApDa,SAACC,GACpB1B,EAAQ0B,EAAMC,OAAOH,SAyBjBvB,EAGIA,EAAW2B,KAAI,SAAAC,GAAI,OAAK,kBAACC,EAAA,EAAD,CAAUN,MAAOK,EAAKE,QAASF,EAAKlB,YAApC,QAFvB,MA+BL,kBAACqB,EAAA,EAAD,CACEC,SAAUzC,EAAS,CAAE0C,UAAU,IAC/Bd,KAAK,aACLG,GAAG,sBACHY,MAAM,oBACNC,MAAO,CAAEC,OAAQ,GACjBC,YAAY,yBACZC,WAAS,EACTF,OAAO,SACPG,gBAAiB,CACfC,QAAQ,KAGXlD,EAAOwB,YACN,wBACF,6BACA,kBAAC2B,EAAA,EAAD,CAAQC,MAAM,UAAUC,KAAK,UAA7B,aAGA,6BA3CA/C,EAGI,kBAACgD,EAAA,EAAD,CAAkBF,MAAM,cAFvB,MA8CP,2BAAIhD,KCpGJmD,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACL,kBAAC,EAAD,MACFJ,K","file":"static/js/main.d2004728.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./styles.css\";\nimport { Button } from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport axios from \"axios\";\nimport { useForm } from \"react-hook-form\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst App = () => {\n  const { errors, register, handleSubmit } = useForm();\n  const [labelValue, setLabelValue] = useState(\"\");\n  const [blnShowProgress, setBlnShowProgress] = useState(false);\n  const [algo, setAlgo] = useState(\"predictPost\");\n  const [methodList, setMethodList] = useState(null);\n\n  if(!methodList){\n    axios.get('/getPredictMethods').then(response => {\n      console.log('Method list received', response.data);\n      setMethodList(response.data);\n    });\n  }\n\n  const handleChange = (event) => {\n    setAlgo(event.target.value);\n  };\n\n  const onSubmit = (data) => {\n    console.log(data);\n    setLabelValue('');\n    setBlnShowProgress(true);\n    console.log('dropdown selected', algo);\n    axios.post(\"/\" + algo , {'query' : data.inputfield}).then((res) => {\n      console.log(\"response\", res);\n      if (res.data) {\n        setLabelValue(res.data.group);\n      }\n      setBlnShowProgress(false);\n    }, (error) => {\n      console.log('error', error);\n      setBlnShowProgress(false);\n    });\n  };\n\n  if(!algo && methodList && methodList.length> 0){\n    algo = methodList[0].displayname;\n  }\n\n  const methodListHtml = ()=> {\n    if(!methodList){\n      return null;\n    }\n     return methodList.map(item => (<MenuItem value={item.method}>{item.displayname} </MenuItem>));\n    //return null;\n  }\n\n  const progressBar = () => {\n    if(!blnShowProgress){\n      return null;\n    }\n    return (<CircularProgress color=\"secondary\" />);\n  }\n  return (\n    <div className=\"App\">\n      <h1>NLP App</h1>\n      <p>\n        Enter issue description and app will tell you which group shall resolve\n        it\n      </p>\n      <form onSubmit={handleSubmit(onSubmit)}>\n      \n      <Select name=\"algo\" ref={register}\n          labelId=\"demo-customized-select-label\"\n          id=\"demo-customized-select\"\n          value={algo}\n          onChange={handleChange}\n         \n          \n        >\n       {methodListHtml()}\n        </Select>\n        <TextField\n          inputRef={register({ required: true })} // pattern: /^[A-Za-z0-9\\s]+$/i\n          name=\"inputfield\"\n          id=\"standard-full-width\"\n          label=\"Issue Description\"\n          style={{ margin: 8 }}\n          placeholder=\"Enter Description here\"\n          fullWidth\n          margin=\"normal\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n        />\n        {errors.inputfield &&\n          \"Input cannot be empty\"}\n        <br />\n        <Button color=\"primary\" type=\"submit\">\n          Get Group\n        </Button> \n        <br />\n        {progressBar()}\n      </form>\n\n      <p>{labelValue}</p>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n  rootElement\n);\n"],"sourceRoot":""}